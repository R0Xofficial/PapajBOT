import os
import logging
import sqlite3
import asyncio
from datetime import datetime, time as dt_time
import pytz

# ZMIANA: Importujemy funkcjƒô do wczytywania pliku .env
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# ZMIANA: Wczytujemy zmienne ≈õrodowiskowe z pliku .env na samym poczƒÖtku
load_dotenv()

# --- KONFIGURACJA ---
# Teraz os.getenv odczyta warto≈õƒá z pliku .env, je≈õli jest dostƒôpna
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "DOMYSLNY_TOKEN_JEZELI_BRAK")
DB_FILE = "barka_bot.db"

# --- TEKST PIOSENKI "BARKA" ---
BARKA_LYRICS = [
    "Pan kiedy≈õ stanƒÖ≈Ç nad brzegiem,\nSzuka≈Ç ludzi gotowych p√≥j≈õƒá za Nim,\nBy ≈Çowiƒá serca s≈Ç√≥w Bo≈ºych prawdƒÖ.",
    "O Panie, to Ty na mnie spojrza≈Çe≈õ,\nTwoje usta dzi≈õ wyrzek≈Çy me imiƒô.\nSwojƒÖ barkƒô pozostawiam na brzegu,\nRazem z TobƒÖ nowy zacznƒô dzi≈õ ≈Ç√≥w.",
    "Jestem ubogim cz≈Çowiekiem,\nMoim skarbem sƒÖ rƒôce gotowe\nDo pracy z TobƒÖ i czyste serce.",
    "Ty, potrzebujesz mych d≈Çoni,\nMych serc, m≈Çodzie≈Ñczej odwagi,\nTylko Ty, rybaka, chcia≈Çe≈õ mieƒá w domu swym,\nBy sobƒÖ dzieliƒá siƒô z nim."
]

# Konfiguracja logowania
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.ext").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)
POLAND_TZ = pytz.timezone('Europe/Warsaw')

# --- BAZA DANYCH ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS subscribers (chat_id INTEGER PRIMARY KEY)')
    conn.commit()
    conn.close()
    logger.info("Baza danych zainicjowana.")

def get_subscribers() -> set:
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM subscribers")
    subscribers = {row[0] for row in cursor.fetchall()}
    conn.close()
    return subscribers

def add_subscriber(chat_id: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO subscribers (chat_id) VALUES (?)", (chat_id,))
    conn.commit()
    conn.close()

def remove_subscriber(chat_id: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM subscribers WHERE chat_id = ?", (chat_id,))
    conn.commit()
    conn.close()

# --- FUNKCJE BOTA ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Wysy≈Ça wiadomo≈õƒá powitalnƒÖ."""
    welcome_message = (
        "Cze≈õƒá! Jestem BarkaBot üéµ\n\n"
        "Codziennie o godzinie 21:37 bƒôdƒô wysy≈Çaƒá na ten czat tekst 'Barki'.\n\n"
        "‚û°Ô∏è Aby rozpoczƒÖƒá, u≈ºyj komendy /subskrybuj.\n"
        "‚ÑπÔ∏è Po listƒô wszystkich komend wpisz /pomoc."
    )
    await update.message.reply_text(welcome_message)

async def pomoc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Wysy≈Ça listƒô dostƒôpnych komend."""
    help_text = (
        "Oto lista dostƒôpnych komend:\n\n"
        "‚úÖ /subskrybuj - Aktywuje codziennƒÖ wysy≈Çkƒô 'Barki' o 21:37.\n\n"
        "‚ùå /anuluj - Zatrzymuje subskrypcjƒô dla tego czatu.\n\n"
        "üìä /status - Sprawdza status subskrypcji i czas nastƒôpnej wysy≈Çki.\n\n"
        "‚ñ∂Ô∏è /terazspiewaj - Wysy≈Ça 'Barkƒô' natychmiast (do test√≥w).\n\n"
        "‚ùì /pomoc - Wy≈õwietla tƒô listƒô komend."
    )
    await update.message.reply_text(help_text)
    
async def subskrybuj(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Dodaje czat do listy subskrybent√≥w."""
    chat_id = update.effective_chat.id
    if chat_id not in get_subscribers():
        add_subscriber(chat_id)
        logger.info(f"Nowa subskrypcja z czatu {chat_id}.")
        await update.message.reply_text(
            "Subskrypcja aktywowana! üéâ Widzimy siƒô o 21:37.\n"
            "Je≈õli zechcesz zrezygnowaƒá, wpisz /anuluj."
        )
    else:
        await update.message.reply_text(
            "Ten czat jest ju≈º na li≈õcie subskrybent√≥w! U≈ºyj /status, aby sprawdziƒá szczeg√≥≈Çy."
        )

async def anuluj(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Usuwa czat z listy subskrybent√≥w."""
    chat_id = update.effective_chat.id
    if chat_id in get_subscribers():
        remove_subscriber(chat_id)
        logger.info(f"Czat {chat_id} zrezygnowa≈Ç z subskrypcji.")
        await update.message.reply_text("Subskrypcja dla tego czatu zosta≈Ça anulowana.")
    else:
        await update.message.reply_text("Tego czatu nie ma na li≈õcie subskrybent√≥w.")

async def send_barka(context: ContextTypes.DEFAULT_TYPE) -> None:
    """G≈Ç√≥wna funkcja wysy≈ÇajƒÖca wiadomo≈õci."""
    job = context.job
    subscribers = get_subscribers()
    logger.info(f"Uruchomiono zadanie '{job.name}'. Znaleziono {len(subscribers)} subskrybent√≥w.")
    if not subscribers:
        logger.warning("Brak subskrybent√≥w do wys≈Çania wiadomo≈õci.")
        return

    for chat_id in subscribers:
        try:
            logger.info(f"Wysy≈Çanie do {chat_id}...")
            for part in BARKA_LYRICS:
                await context.bot.send_message(chat_id=chat_id, text=part)
                await asyncio.sleep(2)
            logger.info(f"Wys≈Çano pomy≈õlnie do {chat_id}.")
        except Exception as e:
            logger.error(f"Nie uda≈Ço siƒô wys≈Çaƒá wiadomo≈õci do {chat_id}: {e}")
            if "bot was blocked" in str(e) or "chat not found" in str(e) or "kicked" in str(e):
                remove_subscriber(chat_id)
                logger.info(f"Czat {chat_id} jest niedostƒôpny. Usuniƒôto z subskrypcji.")

async def teraz_spiewaj(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Wysy≈Ça 'Barkƒô' na ≈ºƒÖdanie."""
    chat_id = update.effective_chat.id
    logger.info(f"U≈ºytkownik {chat_id} uruchomi≈Ç rƒôczne wysy≈Çanie przez /terazspiewaj.")
    await update.message.reply_text("Ju≈º ≈õpiewam! Rozpoczynam wysy≈Çkƒô 'Barki'...")
    context.job_queue.run_once(send_barka, 1, name="manual_send")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sprawdza status bota."""
    sub_count = len(get_subscribers())
    jobs = context.job_queue.get_jobs_by_name("codzienna_barka")
    now_in_poland = datetime.now(POLAND_TZ).strftime('%Y-%m-%d %H:%M:%S %Z')
    
    status_text = (
        f"Status bota:\n"
        f"üï∞Ô∏è Aktualny czas (PL): {now_in_poland}\n"
        f"üë• Liczba subskrybent√≥w: {sub_count}\n"
    )
    
    if jobs:
        next_run = jobs[0].next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')
        status_text += f"üé∂ Nastƒôpne ≈õpiewanie: {next_run}"
    else:
        status_text += "üé∂ Zaplanowane zadanie: Nie"
        
    await update.message.reply_text(status_text)

def main() -> None:
    # Delikatna zmiana w sprawdzaniu tokena, aby by≈Ç bardziej uniwersalny
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "DOMYSLNY_TOKEN_JEZELI_BRAK":
        logger.error("Nie znaleziono tokena bota! Upewnij siƒô, ≈ºe plik .env istnieje i zawiera TELEGRAM_TOKEN.")
        return

    init_db()
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    job_queue = application.job_queue
    job_queue.run_daily(
        send_barka,
        time=dt_time(hour=21, minute=37, tzinfo=POLAND_TZ),
        name="codzienna_barka"
    )
    logger.info("Zaplanowano zadanie 'codzienna_barka'.")

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pomoc", pomoc))
    application.add_handler(CommandHandler("subskrybuj", subskrybuj))
    application.add_handler(CommandHandler("anuluj", anuluj))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("terazspiewaj", teraz_spiewaj))
    
    logger.info("Bot zosta≈Ç uruchomiony i nas≈Çuchuje...")
    application.run_polling()

if __name__ == '__main__':
    main()
